#define _CRT_SECURE_NO_WARNINGS 
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
///火柴棍问题

/*
算法分3步：

step1:
把需要的火柴棍根数映射到数组中（用数组来记录/表示）

step2:
写一个方法，用来获取任何一个数字，所需要的火柴根数

step3:
用枚举方法，在0~1111范围内，哪些数字可以实现A+B=c
而且，判断条件里面，需要做火柴根数的判断。这就是step2单独写一个函数的原因。

*/

int fun(int x)
{
	int num = 0;//用来计数的变量，一定要记得初始化
	int f[10] = { 6, 2, 5, 5, 4, 5, 6, 3, 7, 6 };
	//用一个数组来记录0~9每个数字需要用多少根火柴棍

	//若果x/10的商不等于0,则这个数字至少有2位数
	while (x / 10 != 0)
	{
		//获得x的末尾数字并将此数所需要用到的火柴棍根数累加到num中
		num += f[x % 10];
		x = x / 10;//去掉x的末尾数字，例如x的值为123，则现在的值为12
	}

	//最后加上此时x所需要的火柴棍根数（此时x一定是一位数）
	num += f[x];
	
	return num;//返回需要火柴的总根数
}

int main()
{
	int a, b, c, m, sum = 0;//sum是用来计数的，因此一定要初始化为0 
	scanf("%d", &m);//读入火柴棍根数

	//开始枚举a和b 
	for (a = 0; a < 1111; a++)
	{
		for (b = 0; b <= 1111; b++)
		{
			c = a + b; //计算出c

			//fun是我们自己写的 子函数，用来计算一个数所需要用火柴棍的总数
			//当a使用的火柴棍根数 + b使用的火柴棍根数 +c使用的火柴棍根数之后恰好等于m-4时，成功找到一组解
			if (fun(a) + fun(b) + fun(c) == m - 4)
			{
				printf("%d + %d = %d \r\n", a, b, c);
				sum++;
			}
		}
	}

	printf("一共可以拼出%d个不同的等式\r\n", sum);


	printf("\r\n");
	system("pause");
	return 0;
}






